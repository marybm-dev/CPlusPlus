{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 \
\
bool IsPalindrome(string s);\
bool IsDivisibleBy3(unsigned int n);\
bool ContainsDog(string s);\
\
int main()\
\{\
    cout << "at: " << IsPalindrome("at") << endl;\
    cout << "racecar: " << IsPalindrome("racecar") << endl;\
    cout << "racecars: " << IsPalindrome("racecars") << endl;\
\
    cout << endl;\
\
    cout << "5: " << IsDivisibleBy3(5) << endl;\
    cout << "15: " << IsDivisibleBy3(15) << endl;\
    cout << "240: " << IsDivisibleBy3(240) << endl;\
    cout << "2: " << IsDivisibleBy3(2) << endl;\
\
    cout << endl;\
\
    cout << "doghouse: " << ContainsDog("doghouse") << endl;\
    cout << "hotdog stand: " << ContainsDog("hotdog stand") << endl;\
    cout << "elephant: " << ContainsDog("elephant") << endl;\
\}\
\
bool IsPalindrome(string s)\
\{\
    if (s.length() <= 1)\
        return true;\
\
    if (s[0] != s[s.length()-1])\
        return false;\
\
    return (IsPalindrome(s.substr(1,s.length()-2)));\
\}\
\
bool IsDivisibleBy3(unsigned int n)\
\{\
    if (n == 0)\
        return true;\
    if (n < 3)\
        return false;\
\
    return (IsDivisibleBy3(n - 3));\
\}\
\
int CountCannonballs(int n)\
\{\
    if (n == 0)\
        return 0;\
    return (n*n + CountCannonballs(n-1));\
\}\
}